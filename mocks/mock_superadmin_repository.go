// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hibbannn/backend_1-Hibban_Nurcholis-Mini_Project_2/repositories (interfaces: SuperAdminRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/hibbannn/backend_1-Hibban_Nurcholis-Mini_Project_2/entities"
	reflect "reflect"
)

// MockSuperAdminRepository is a mock of SuperAdminRepository interface
type MockSuperAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSuperAdminRepositoryMockRecorder
}

// MockSuperAdminRepositoryMockRecorder is the mock recorder for MockSuperAdminRepository
type MockSuperAdminRepositoryMockRecorder struct {
	mock *MockSuperAdminRepository
}

// NewMockSuperAdminRepository creates a new mock instance
func NewMockSuperAdminRepository(ctrl *gomock.Controller) *MockSuperAdminRepository {
	mock := &MockSuperAdminRepository{ctrl: ctrl}
	mock.recorder = &MockSuperAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuperAdminRepository) EXPECT() *MockSuperAdminRepositoryMockRecorder {
	return m.recorder
}

// ApproveAdminRegistration mocks base method
func (m *MockSuperAdminRepository) ApproveAdminRegistration(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveAdminRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveAdminRegistration indicates an expected call of ApproveAdminRegistration
func (mr *MockSuperAdminRepositoryMockRecorder) ApproveAdminRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAdminRegistration", reflect.TypeOf((*MockSuperAdminRepository)(nil).ApproveAdminRegistration), arg0)
}

// CreateSuperAdmin mocks base method
func (m *MockSuperAdminRepository) CreateSuperAdmin(arg0 *entities.Actor) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSuperAdmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSuperAdmin indicates an expected call of CreateSuperAdmin
func (mr *MockSuperAdminRepositoryMockRecorder) CreateSuperAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSuperAdmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).CreateSuperAdmin), arg0)
}

// CreateUser mocks base method
func (m *MockSuperAdminRepository) CreateUser(arg0 *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockSuperAdminRepositoryMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSuperAdminRepository)(nil).CreateUser), arg0)
}

// DeleteUserById mocks base method
func (m *MockSuperAdminRepository) DeleteUserById(arg0 uint, arg1 *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById
func (mr *MockSuperAdminRepositoryMockRecorder) DeleteUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockSuperAdminRepository)(nil).DeleteUserById), arg0, arg1)
}

// GetAllAdmins mocks base method
func (m *MockSuperAdminRepository) GetAllAdmins(arg0 string, arg1, arg2 int) ([]*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins
func (mr *MockSuperAdminRepositoryMockRecorder) GetAllAdmins(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetAllAdmins), arg0, arg1, arg2)
}

// GetAllUsers mocks base method
func (m *MockSuperAdminRepository) GetAllUsers(arg0, arg1, arg2 string, arg3, arg4 int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockSuperAdminRepositoryMockRecorder) GetAllUsers(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetAllUsers), arg0, arg1, arg2, arg3, arg4)
}

// GetApprovalRequests mocks base method
func (m *MockSuperAdminRepository) GetApprovalRequests() ([]*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovalRequests")
	ret0, _ := ret[0].([]*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovalRequests indicates an expected call of GetApprovalRequests
func (mr *MockSuperAdminRepositoryMockRecorder) GetApprovalRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalRequests", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetApprovalRequests))
}

// GetUserById mocks base method
func (m *MockSuperAdminRepository) GetUserById(arg0 uint) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById
func (mr *MockSuperAdminRepositoryMockRecorder) GetUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockSuperAdminRepository)(nil).GetUserById), arg0)
}

// LoginSuperAdmin mocks base method
func (m *MockSuperAdminRepository) LoginSuperAdmin(arg0 string) (*entities.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginSuperAdmin", arg0)
	ret0, _ := ret[0].(*entities.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginSuperAdmin indicates an expected call of LoginSuperAdmin
func (mr *MockSuperAdminRepositoryMockRecorder) LoginSuperAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginSuperAdmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).LoginSuperAdmin), arg0)
}

// RejectAdminRegistration mocks base method
func (m *MockSuperAdminRepository) RejectAdminRegistration(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAdminRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectAdminRegistration indicates an expected call of RejectAdminRegistration
func (mr *MockSuperAdminRepositoryMockRecorder) RejectAdminRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAdminRegistration", reflect.TypeOf((*MockSuperAdminRepository)(nil).RejectAdminRegistration), arg0)
}

// UpdateAdminActiveStatus mocks base method
func (m *MockSuperAdminRepository) UpdateAdminActiveStatus(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminActiveStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminActiveStatus indicates an expected call of UpdateAdminActiveStatus
func (mr *MockSuperAdminRepositoryMockRecorder) UpdateAdminActiveStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminActiveStatus", reflect.TypeOf((*MockSuperAdminRepository)(nil).UpdateAdminActiveStatus), arg0, arg1)
}

// UpdateDeadactivedAdmin mocks base method
func (m *MockSuperAdminRepository) UpdateDeadactivedAdmin(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeadactivedAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeadactivedAdmin indicates an expected call of UpdateDeadactivedAdmin
func (mr *MockSuperAdminRepositoryMockRecorder) UpdateDeadactivedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeadactivedAdmin", reflect.TypeOf((*MockSuperAdminRepository)(nil).UpdateDeadactivedAdmin), arg0)
}
